const jsonData = { /* your large nested JSON */ };
const jsonString = JSON.stringify(jsonData, null, 2);

await page.setContent(`
    <!DOCTYPE html>
    <html>
    <head>
        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/json-viewer@1.2.0/dist/json-viewer.min.css">
    </head>
    <body>
        <div id="json-viewer"></div>
        <script src="https://cdn.jsdelivr.net/npm/json-viewer@1.2.0/dist/json-viewer.min.js"></script>
        <script>
            const jsonViewer = new JSONViewer();
            document.querySelector("#json-viewer").appendChild(jsonViewer.getContainer());
            jsonViewer.showJSON(${jsonString});
        </script>
    </body>
    </html>
`);

await page.screenshot({ path: 'json_viewer_screenshot.png' });

const { chromium } = require('playwright');

(async () => {
  const browser = await chromium.launch();
  const context = await browser.newContext();
  const page = await context.newPage();

  // Intercept the API response
  page.on('response', async (response) => {
    const url = response.url();

    // Check if the response is from the desired API endpoint
    if (url.includes('your-api-endpoint')) {
      try {
        // Parse the JSON response
        const jsonResponse = await response.json();

        // Inject React and react-json-view into the page
        await page.evaluate(async (json) => {
          // Load React and ReactDOM from a CDN
          const loadScript = (src) => {
            return new Promise((resolve, reject) => {
              const script = document.createElement('script');
              script.src = src;
              script.onload = resolve;
              script.onerror = reject;
              document.head.appendChild(script);
            });
          };

          await loadScript('https://unpkg.com/react@17/umd/react.development.js');
          await loadScript('https://unpkg.com/react-dom@17/umd/react-dom.development.js');
          await loadScript('https://unpkg.com/react-json-view@1.21.3/dist/main.js');

          // Create a container for the JSON viewer
          const container = document.createElement('div');
          container.id = 'json-viewer-container';
          container.style.padding = '20px';
          container.style.backgroundColor = '#f4f4f4';
          container.style.border = '1px solid #ddd';
          document.body.innerHTML = ''; // Clear the page
          document.body.appendChild(container);

          // Render the JSON using react-json-view
          const ReactJson = window.ReactJson;
          ReactDOM.render(
            React.createElement(ReactJson, { src: json, collapsed: false }),
            container
          );
        }, jsonResponse);

        // Take a screenshot of the rendered JSON
        await page.screenshot({ path: 'json_response.png', fullPage: true });

        console.log('Screenshot of JSON response saved as json_response.png');
      } catch (error) {
        console.error('Failed to process JSON response:', error);
      }
    }
  });

  // Navigate to the page that triggers the API request
  await page.goto('https://example.com');

  // Wait for network activity to settle (optional)
  await page.waitForLoadState('networkidle');

  await browser.close();
})();

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>JSON Viewer</title>
  <style>
    /* Embedded json-viewer CSS */
    .json-viewer {
      color: #000;
      padding-left: 20px;
    }
    .json-viewer .json-viewer-item {
      display: block;
    }
    .json-viewer .json-viewer-key {
      color: #92278f;
    }
    .json-viewer .json-viewer-value {
      color: #2e8b57;
    }
    .json-viewer .json-viewer-collapse {
      cursor: pointer;
    }
  </style>
</head>
<body>
  <div id="json-viewer"></div>
  <script>
    // Embedded json-viewer JS
    function JSONViewer() {
      this.container = document.createElement('div');
      this.container.className = 'json-viewer';
    }

    JSONViewer.prototype.getContainer = function () {
      return this.container;
    };

    JSONViewer.prototype.showJSON = function (json, parentElement, level) {
      level = level || 0;
      parentElement = parentElement || this.container;
      const isCollapsible = json && typeof json === 'object' && Object.keys(json).length > 0;

      if (isCollapsible) {
        const collapseButton = document.createElement('span');
        collapseButton.className = 'json-viewer-collapse';
        collapseButton.textContent = '[-]';
        collapseButton.onclick = function () {
          const isCollapsed = this.textContent === '[+]';
          this.textContent = isCollapsed ? '[-]' : '[+]';
          parentElement.style.display = isCollapsed ? 'block' : 'none';
        };
        parentElement.appendChild(collapseButton);
      }

      for (const key in json) {
        if (json.hasOwnProperty(key)) {
          const item = document.createElement('div');
          item.className = 'json-viewer-item';
          const keyElement = document.createElement('span');
          keyElement.className = 'json-viewer-key';
          keyElement.textContent = key + ': ';
          item.appendChild(keyElement);

          if (typeof json[key] === 'object' && json[key] !== null) {
            this.showJSON(json[key], item, level + 1);
          } else {
            const valueElement = document.createElement('span');
            valueElement.className = 'json-viewer-value';
            valueElement.textContent = JSON.stringify(json[key]);
            item.appendChild(valueElement);
          }

          parentElement.appendChild(item);
        }
      }
    };

    // Render JSON
    const jsonResponse = JSON.parse(`{{JSON_RESPONSE}}`);
    const viewer = new JSONViewer();
    document.querySelector("#json-viewer").appendChild(viewer.getContainer());
    viewer.showJSON(jsonResponse, null, 2);
  </script>
</body>
</html>

import { Page } from '@playwright/test';
import * as fs from 'fs';
import * as path from 'path';

export async function renderJson(page: Page, json: object) {
  // Read the HTML template
  const templatePath = path.join(__dirname, '../../public/template.html');
  let htmlContent = fs.readFileSync(templatePath, 'utf-8');

  // Convert JSON to string and escape special characters
  const jsonString = JSON.stringify(json)
    .replace(/\\/g, '\\\\') // Escape backslashes
    .replace(/"/g, '\\"')   // Escape double quotes
    .replace(/\n/g, '\\n')  // Escape newlines
    .replace(/\r/g, '\\r')  // Escape carriage returns
    .replace(/\t/g, '\\t'); // Escape tabs

  // Replace the placeholder with the escaped JSON string
  htmlContent = htmlContent.replace('{{JSON_RESPONSE}}', jsonString);

  // Render the HTML in the browser
  await page.setContent(htmlContent, { waitUntil: 'domcontentloaded' });
}


import { test, expect } from '@playwright/test';
import { renderJson } from './utils/renderJson';

test('Render JSON with collapsible nested objects and take a screenshot', async ({ page }) => {
  // Sample JSON with nested objects
  const jsonResponse = {
    name: 'John',
    age: 30,
    address: {
      city: 'New York',
      zip: '10001',
      coordinates: {
        lat: 40.7128,
        lng: -74.0060,
      },
    },
    hobbies: ['Reading', 'Traveling', 'Coding'],
  };

  // Render the JSON in the browser
  await renderJson(page, jsonResponse);

  // Take a screenshot
  await page.screenshot({ path: 'screenshots/json-viewer.png', fullPage: true });

  // Verify the JSON structure (optional)
  const jsonViewerElement = await page.$('#json-viewer');
  expect(jsonViewerElement).not.toBeNull();
});
